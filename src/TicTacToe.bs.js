// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ArrayLabels = require("bs-platform/lib/js/arrayLabels.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var initialBoard = Caml_array.caml_make_vect(9, undefined);

function updateBoard(currentBoard, player, squareIndex) {
  Caml_array.caml_array_set(currentBoard, squareIndex, player);
  return currentBoard;
}

function switchPlayer(currentPlayer) {
  if (currentPlayer) {
    return /* X */0;
  } else {
    return /* O */1;
  }
}

function playerToString(currentPlayer) {
  if (currentPlayer) {
    return "O";
  } else {
    return "X";
  }
}

function id(i, a) {
  return /* tuple */[
          i,
          a
        ];
}

function zipWithIndices(arr) {
  return ArrayLabels.mapi(id, arr);
}

function arrToMatrix(arr) {
  var init = ArrayLabels.make_matrix(3, 3, /* tuple */[
        0,
        undefined
      ]);
  var zipped = ArrayLabels.mapi(id, arr);
  var f = function (acc, zippedVal) {
    var index = zippedVal[0];
    var x = index % 3;
    var y = index / 3 | 0;
    Caml_array.caml_array_set(Caml_array.caml_array_get(acc, x), y, zippedVal);
    return acc;
  };
  return ArrayLabels.fold_left(f, init, zipped);
}

var component = ReasonReact.reducerComponent("Example");

function make(greeting, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var message = "It's " + ((
                  self[/* state */1][/* turn */0] ? "O" : "X"
                ) + "'s turn");
              var renderSquare = function (square, index) {
                if (square !== undefined) {
                  return React.createElement("span", undefined, square ? "O" : "X");
                } else {
                  return React.createElement("button", {
                              onClick: (function () {
                                  return Curry._1(self[/* send */3], /* Click */[index]);
                                })
                            }, "Select");
                }
              };
              var matrix = arrToMatrix(self[/* state */1][/* board */1]);
              var rows = ArrayLabels.mapi((function (i, row) {
                      return React.createElement("div", {
                                  key: "row-key-" + String(i)
                                }, React.createElement("div", undefined, ArrayLabels.map((function (param) {
                                            var i = param[0];
                                            return React.createElement("span", {
                                                        key: "square-key-" + String(i)
                                                      }, renderSquare(param[1], i));
                                          }), row)));
                    }), matrix);
              return React.createElement("div", undefined, React.createElement("h1", undefined, greeting), React.createElement("h2", undefined, message), React.createElement("div", undefined, rows));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* turn : X */0,
                      /* board */initialBoard
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              console.log(state);
              return /* Update */Block.__(0, [/* record */[
                          /* turn */state[/* turn */0] ? /* X */0 : /* O */1,
                          /* board */updateBoard(state[/* board */1], state[/* turn */0], action[0])
                        ]]);
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.initialBoard = initialBoard;
exports.updateBoard = updateBoard;
exports.switchPlayer = switchPlayer;
exports.playerToString = playerToString;
exports.id = id;
exports.zipWithIndices = zipWithIndices;
exports.arrToMatrix = arrToMatrix;
exports.component = component;
exports.make = make;
/* component Not a pure module */
