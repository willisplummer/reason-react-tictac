// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ListLabels = require("bs-platform/lib/js/listLabels.js");
var ArrayLabels = require("bs-platform/lib/js/arrayLabels.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var initialBoard = Caml_array.caml_make_vect(9, undefined);

function isNone(opt) {
  return opt === undefined;
}

function isSome(opt) {
  return !isNone(opt);
}

var winningCombos = /* :: */[
  /* :: */[
    0,
    /* :: */[
      1,
      /* :: */[
        2,
        /* [] */0
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      3,
      /* :: */[
        4,
        /* :: */[
          5,
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        6,
        /* :: */[
          7,
          /* :: */[
            8,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          0,
          /* :: */[
            3,
            /* :: */[
              6,
              /* [] */0
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            1,
            /* :: */[
              4,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              2,
              /* :: */[
                5,
                /* :: */[
                  8,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                0,
                /* :: */[
                  4,
                  /* :: */[
                    8,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  2,
                  /* :: */[
                    4,
                    /* :: */[
                      6,
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function isAWinner(list) {
  return ListLabels.fold_left((function (init, b) {
                var match = init === b;
                if (match) {
                  return init;
                }
                
              }), ListLabels.hd(list), list);
}

function safeHd(xs) {
  var match = ListLabels.length(xs) > 0;
  if (match) {
    return Js_primitive.some(ListLabels.hd(xs));
  }
  
}

function getOrElse($$default, opt) {
  if (opt !== undefined) {
    return Js_primitive.valFromOption(opt);
  } else {
    return $$default;
  }
}

function updateWinner(currentBoard) {
  return getOrElse(undefined, safeHd(ListLabels.filter(isSome)(ListLabels.map((function (combo) {
                            return ListLabels.fold_right((function (index, init) {
                                          var match = !isNone(Caml_array.caml_array_get(currentBoard, index)) && Caml_array.caml_array_get(currentBoard, index) === init;
                                          if (match) {
                                            return init;
                                          }
                                          
                                        }), combo, Caml_array.caml_array_get(currentBoard, ListLabels.hd(combo)));
                          }), winningCombos))));
}

function updateBoard(currentBoard, player, squareIndex) {
  var copy = ArrayLabels.copy(currentBoard);
  Caml_array.caml_array_set(copy, squareIndex, player);
  return copy;
}

function switchPlayer(currentPlayer) {
  if (currentPlayer) {
    return /* X */0;
  } else {
    return /* O */1;
  }
}

function playerToString(currentPlayer) {
  if (currentPlayer) {
    return "O";
  } else {
    return "X";
  }
}

function id(i, a) {
  return /* tuple */[
          i,
          a
        ];
}

function zipWithIndices(arr) {
  return ArrayLabels.mapi(id, arr);
}

function arrToMatrix(arr) {
  var init = ArrayLabels.make_matrix(3, 3, /* tuple */[
        0,
        undefined
      ]);
  var zipped = ArrayLabels.mapi(id, arr);
  var f = function (acc, zippedVal) {
    var index = zippedVal[0];
    var x = index % 3;
    var y = index / 3 | 0;
    Caml_array.caml_array_set(Caml_array.caml_array_get(acc, x), y, zippedVal);
    return acc;
  };
  return ArrayLabels.fold_left(f, init, zipped);
}

var component = ReasonReact.reducerComponent("Example");

function availableMoves(board) {
  var zipped = ArrayLabels.mapi(id, board);
  var zippedList = ArrayLabels.to_list(zipped);
  var filteredZippedList = ListLabels.filter((function (param) {
            return isNone(param[1]);
          }))(zippedList);
  return ListLabels.map((function (prim) {
                return prim[0];
              }), filteredZippedList);
}

function predictFuture(board, turn) {
  var moves = availableMoves(board);
  return ListLabels.map((function (idx) {
                return /* tuple */[
                        idx,
                        updateBoard(board, turn, idx)
                      ];
              }), moves);
}

function optionMap(f, opt) {
  if (opt !== undefined) {
    return Js_primitive.some(Curry._1(f, Js_primitive.valFromOption(opt)));
  }
  
}

function optionFlatMap(f, opt) {
  if (opt !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(opt));
  }
  
}

function prioritizeWinners(winners) {
  return ListLabels.fold_left((function (init, b) {
                if (init !== undefined) {
                  var acc = init;
                  if (b !== undefined) {
                    var match = acc === /* X */0 || b === /* X */0;
                    if (match) {
                      return /* X */0;
                    } else {
                      return /* O */1;
                    }
                  } else {
                    return acc;
                  }
                } else if (b !== undefined) {
                  return b;
                } else {
                  return undefined;
                }
              }), undefined, winners);
}

function chooseComputerMove(board) {
  var futureBoards = predictFuture(board, /* O */1);
  var futureBoardsAfterPlayer = ListLabels.map((function (param) {
          return /* tuple */[
                  param[0],
                  predictFuture(param[1], /* X */0)
                ];
        }), futureBoards);
  var winnerFuturesAfterPlayerMoves = ListLabels.map((function (param) {
          return /* tuple */[
                  param[0],
                  ListLabels.map((function (param) {
                          return updateWinner(param[1]);
                        }), param[1])
                ];
        }), futureBoardsAfterPlayer);
  var winnersAfterPossiblePlayerMoves = ListLabels.map((function (param) {
          return /* tuple */[
                  param[0],
                  prioritizeWinners(param[1])
                ];
        }), winnerFuturesAfterPlayerMoves);
  var compWinners = ListLabels.filter((function (param) {
            return param[1] === /* O */1;
          }))(winnersAfterPossiblePlayerMoves);
  var noWinners = ListLabels.filter((function (param) {
            return param[1] === undefined;
          }))(winnersAfterPossiblePlayerMoves);
  var playerWinners = ListLabels.filter((function (param) {
            return param[1] === /* X */0;
          }))(winnersAfterPossiblePlayerMoves);
  return getOrElse(1, optionFlatMap((function (a) {
                    return a;
                  }), safeHd(ListLabels.map((function (param) {
                            return optionMap((function (prim) {
                                          return prim[0];
                                        }), param);
                          }), ListLabels.filter(isSome)(/* :: */[
                              safeHd(compWinners),
                              /* :: */[
                                safeHd(noWinners),
                                /* :: */[
                                  safeHd(playerWinners),
                                  /* [] */0
                                ]
                              ]
                            ])))));
}

function make(greeting, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* winner */1];
              var message = match !== undefined ? (
                  match ? "O" : "X"
                ) + " wins!" : "It's " + ((
                    self[/* state */1][/* turn */0] ? "O" : "X"
                  ) + "'s turn");
              var renderSquare = function (square, index) {
                if (square !== undefined) {
                  return React.createElement("span", undefined, square ? "O" : "X");
                } else {
                  return React.createElement("button", {
                              disabled: !isNone(self[/* state */1][/* winner */1]),
                              onClick: (function () {
                                  return Curry._1(self[/* send */3], /* Click */[index]);
                                })
                            }, "Select");
                }
              };
              var matrix = arrToMatrix(self[/* state */1][/* board */2]);
              var rows = ArrayLabels.mapi((function (i, row) {
                      return React.createElement("div", {
                                  key: "row-key-" + String(i)
                                }, React.createElement("div", undefined, ArrayLabels.map((function (param) {
                                            var i = param[0];
                                            return React.createElement("span", {
                                                        key: "square-key-" + String(i)
                                                      }, renderSquare(param[1], i));
                                          }), row)));
                    }), matrix);
              return React.createElement("div", undefined, React.createElement("h1", undefined, greeting), React.createElement("h2", undefined, message), React.createElement("div", undefined, rows));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* turn : X */0,
                      /* winner */undefined,
                      /* board */initialBoard
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              var boardAfterPlayer = updateBoard(state[/* board */2], state[/* turn */0], action[0]);
              var boardAfterComputer = updateBoard(boardAfterPlayer, /* O */1, chooseComputerMove(boardAfterPlayer));
              var winnerAfterPlayer = updateWinner(boardAfterPlayer);
              var winnerAfterComp = updateWinner(boardAfterComputer);
              var match = !isNone(winnerAfterPlayer);
              var winner = match ? winnerAfterPlayer : winnerAfterComp;
              var match$1 = !isNone(winnerAfterPlayer);
              var newState_002 = /* board */match$1 ? boardAfterPlayer : boardAfterComputer;
              var newState = /* record */[
                /* turn : X */0,
                /* winner */winner,
                newState_002
              ];
              return /* Update */Block.__(0, [newState]);
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.initialBoard = initialBoard;
exports.isNone = isNone;
exports.isSome = isSome;
exports.winningCombos = winningCombos;
exports.isAWinner = isAWinner;
exports.safeHd = safeHd;
exports.getOrElse = getOrElse;
exports.updateWinner = updateWinner;
exports.updateBoard = updateBoard;
exports.switchPlayer = switchPlayer;
exports.playerToString = playerToString;
exports.id = id;
exports.zipWithIndices = zipWithIndices;
exports.arrToMatrix = arrToMatrix;
exports.component = component;
exports.availableMoves = availableMoves;
exports.predictFuture = predictFuture;
exports.optionMap = optionMap;
exports.optionFlatMap = optionFlatMap;
exports.prioritizeWinners = prioritizeWinners;
exports.chooseComputerMove = chooseComputerMove;
exports.make = make;
/* component Not a pure module */
